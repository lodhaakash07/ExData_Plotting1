with(present,plot(year,girls))
with(present,split(girls,year))
max(with(present,split(girls,year)))
max(as.vector(with(present,split(girls,year))))
split(present,present$year)
dim(presnt)
dim(present)
table(split(present,present$year))
dim(split(present,present$year))
length(split(present,present$year))
x <- present[(present$year==1957 | present$year==1961 | present$year==1991 | present$year==1960),c("girls")]
max(x)
names(x <- c("1957","1961","1991","1960")
)
x <- present[(present$year==1957 | present$year==1961 | present$year==1991 | present$year==1960),c("girls")]
names(x) <- c("1957","1961","1991","1960")
name(max(x))
names(max(x))
x
order(x)
with(present,plot(year,boys))
x["total"] <- x$girls + x$boys
type(present)
class(present)
x <- present[(present$year==1957 | present$year==1961 | present$year==1991 | present$year==1960),c("girls","boys")]
names(x) <- c("1957","1961","1991","1960")
row.names(x) <- c("1957","1961","1991","1960")
x <- present[(present$year==1957 | present$year==1961 | present$year==1991 | present$year==1960),c("girls","boys")]
row.names(x) <- c("1957","1961","1991","1960")
View(x)
View(x)
x["total"] <- x$girls + x$boys
x <- present[(present$year==1957 | present$year==1961 | present$year==1991 | present$year==1960),c("girls","boys")]
row.names(x) <- c("1957","1961","1991","1960")
x["total"] <- x$girls + x$boys
x<-x[order(x$total),]
x[1,]
with(present,plot(year,boys/girls))
with(present,plot(year,boys~girls))
with(present,plot(year,boys/girls))
with(present,plot(boys/girls,year))
with(present,plot(boys/(boys+girls),year))
abline(with(present,plot(boys/(boys+girls),year)))
with(present,lm(plot(boys/(boys+girls),year))
)
with(present,(plot(boys/(boys+girls),year)))
with(present,plot(boys/(boys+girls),year))
with(present,plot(boys~girls,year))
with(present,plot(boys~girls,year))
with(present,xyplot(boys~girls,year))
with(present,xyplot(boys,year))
with(present,plot(boys,year))
points(girls)
points(present$girls,type='2')
?points
points(present$girls,type=2)
points(present$girls,pch=2)
points(present$girls,pch=4)
with(present,plot(boys,year))
points(present$girls,pch=4)
table(present$boys > present$girls)
table(present$boys > present$girls)
table(present$boys < present$girls)
max(abs(present$boys - present$girls))
x<- present[order(abs(present$boys - present$girls)),]
x[-1,]
x<- present[order(abs(present$boys - present$girls)),]
x[dim(x)[2],]
dim(x)
x<- present[order(abs(present$boys - present$girls)),]
x[dim(x)[1],]
with(present,plot(boys/girls,year))
with(present,plot(year,boys/girls))
with(present,plot(boys/(boys+girls),year))
with(present,plot(year,boys/(boys+girls)))
x <- present[(present$year==1957 | present$year==1961 | present$year==1991 | present$year==1960),]
x["total"] <- x$girls + x$boys
View(x)
View(x)
?order
order(x$total,decreasing=T)
present$girls + present$boys
x <- with(present,present[order(girls+boys),]
)
View(x)
install.packages("caret")
install.packages("knitr")
data(mtcars)
MTCARS
mtcars
data <- data.frame(mtcars)
summary(mtcars)
str(mtcars)
names(data)
boxplot(data$mpg)
boxplot(data$mpg,col="green")
boxplot(data$mpg ~ data$cyl,col="green")
boxplot(data$mpg,col="green")
boxplot(data$mpg ~ data$cyl,col="green")
boxplot(data$mpg ~ data$cyl)
hist(data$mpg,break=100)
hist(data$mpg,breaks=100)
hist(data$mpg,breaks=10)
hist(data$mpg,breaks=20)
rug(data$mpg)
install.packages("shiny")
shiny
data(mtcars)
head(mtcars)
with(mtcars.plot(mpg,hp,col=cyl))
with(mtcars,plot(mpg,hp,col=cyl))
library(lattice)
data(mtcars)
data <- mtcars
names(mtcars)
with(mtcars, plot(mpg,hp))
with(mtcars, plot(mpg,hp),col=cyl)
with(mtcars, plot(mpg,hp),col=cyl)
with(mtcars, plot(mpg,hp,col=cyl))
abline(h=150,lwd=4)
points(wt)
points(mtcars$wt)
wt
(mtcars$wt)
with(mtcars,vs)
with(mtcars,am)
with(mtcars,gear)
with(mtcars,carb)
points(with(mtcars,carb))
names(mtcars)
str(mtcars)
with(mtcars,boxplot(mpg~cyl))
with(mtcars,boxplot(hp~cyl))
par(c(1,2))
par(c(1,2))
par(c(1,2)
with(mtcars,boxplot(hp~cyl))
names(mtcars)
library(lattice)
xyplot
with(mtcars, xyplot(hp ~ mpg | cyl))
table(mtcars$cyl)
with(mtcars, xyplot(hp ~ mpg ))
with(mtcars, xyplot(hp ~ mpg | cyl))
with(mtcars, xyplot(hp ~ mpg | am))
with(mtcars, xyplot(hp ~ mpg | wt))
par("mfrow")
par("mfcol")
par(mfrow(4,3))
par(mfrow = c(4,3))
clear
clear screen
data(mtcars)
data<-mtcars
par(mfcol=c(4,2),bg="red")
with(data,plot(mpg,hp))
par(mfcol=c(2,2))
with(data,plot(mpg,hp))
with(data,plot(mpg,cyl))
names(data)
points(disp)
points(data$disp)
data(airquality)
data <- airquality
names(data)
par(mfrow=c(2,2))
plot(data$Ozone,data$Wind)
plot(data$Temp,data$Wind)
points(data$Month,col=Month)
points(data$Month,col=data$Month)
title(xlab="wew",ylab="sdsd")
title(xlab="wew",ylab="sdsd",main="sdsd")
mtext("fuck")
mtext("fuck",outer=T)
mtext("fuck",outer=TRUE)
mtext("fudfdfck",outer=TRUE)
text("Dfdf",10,10)
?text
?mtext
?title
?lines
?points
par(mfrow(1,2))
par(mfrow=c(1,2))
plot(data$Ozone,data$Wind,col=data$Month)
legend("topright",col="green")
legend("topright",pch=1,col=c("green","blue"),legend=c("f","c"))
??lines
?lines
examople(points)
example(points)
as.Date("12-8-2014")
?as.Date
dmy("12-8-2014")
library(lubridate)
dmy("12-8-2014")
ymd("12-8-2014")
as.Date("12-8-2014","dd-mm-yyyy")
as.Date("12-8-2014","%d-%m-%Y")
as.Date("12-8-2014")
setwd("~/Projects/ExData_Plotting1")
data <- read.csv("./data.csv")[,c(-1)]
data["TimeDate"] <- ymd_hms(paste(data[,1],paste(data[,2])))
with(data, plot(Sub_metering_1 ~ data$TimeDate,type="l",xlab="",ylab="Energy sub metering"))
with(data, lines(Sub_metering_2 ~ data$TimeDate,type="l",col="Red"))
with(data, lines(Sub_metering_3 ~ data$TimeDate,type="l",col="Blue"))
legend("topright",lty=1,col=c("Black","Red","Blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
library(lubridate)
data <- read.csv("./data.csv")[,c(-1)]
data["TimeDate"] <- ymd_hms(paste(data[,1],paste(data[,2])))
with(data, plot(Sub_metering_1 ~ data$TimeDate,type="l",xlab="",ylab="Energy sub metering"))
with(data, lines(Sub_metering_2 ~ data$TimeDate,type="l",col="Red"))
with(data, lines(Sub_metering_3 ~ data$TimeDate,type="l",col="Blue"))
legend("topright",lty=1,col=c("Black","Red","Blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
##Getting and Processing the data
##Creating a final data set for this peer assignment has been done in
## dataProcess.R R script
source("./dataProcess.R") # This has all the code for getting the data needed
## The required data is saved in data.txt
# Read the data
data <- read.csv("./data.csv")[,c(-1)]
data["TimeDate"] <- ymd_hms(paste(data[,1],paste(data[,2])))
par(mfrow=c(2,2))
with(data, plot(Global_active_power ~ data$TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab=""))
with(data, plot(Voltage ~ TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab="datetime"))
with(data, plot(Sub_metering_1 ~ TimeDate,type="l",xlab="",ylab="Energy sub metering"))
with(data, lines(Sub_metering_2 ~ TimeDate,type="l",col="Red"))
with(data, lines(Sub_metering_3 ~ TimeDate,type="l",col="Blue"))
legend("topright",lty=1,col=c("Black","Red","Blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
with(data, plot(Global_reactive_power ~ TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab="datetime"))
# Read the data
data <- read.csv("./data.csv")[,c(-1)]
data["TimeDate"] <- ymd_hms(paste(data[,1],paste(data[,2])))
par(mfrow=c(2,2),mar=c(4,4,2,2))
with(data, plot(Global_active_power ~ data$TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab=""))
with(data, plot(Voltage ~ TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab="datetime"))
with(data, plot(Sub_metering_1 ~ TimeDate,type="l",xlab="",ylab="Energy sub metering"))
with(data, lines(Sub_metering_2 ~ TimeDate,type="l",col="Red"))
with(data, lines(Sub_metering_3 ~ TimeDate,type="l",col="Blue"))
legend("topright",lty=1,col=c("Black","Red","Blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
with(data, plot(Global_reactive_power ~ TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab="datetime"))
par(mfrow=c(2,2),mar=c(4,2,2,2))
with(data, plot(Global_active_power ~ data$TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab=""))
with(data, plot(Voltage ~ TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab="datetime"))
with(data, plot(Sub_metering_1 ~ TimeDate,type="l",xlab="",ylab="Energy sub metering"))
with(data, lines(Sub_metering_2 ~ TimeDate,type="l",col="Red"))
with(data, lines(Sub_metering_3 ~ TimeDate,type="l",col="Blue"))
legend("topright",lty=1,col=c("Black","Red","Blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
with(data, plot(Global_reactive_power ~ TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab="datetime"))
par(mfrow=c(2,2),mar=c(4,3,2,2))
with(data, plot(Global_active_power ~ data$TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab=""))
with(data, plot(Voltage ~ TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab="datetime"))
with(data, plot(Sub_metering_1 ~ TimeDate,type="l",xlab="",ylab="Energy sub metering"))
with(data, lines(Sub_metering_2 ~ TimeDate,type="l",col="Red"))
with(data, lines(Sub_metering_3 ~ TimeDate,type="l",col="Blue"))
legend("topright",lty=1,col=c("Black","Red","Blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
with(data, plot(Global_reactive_power ~ TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab="datetime"))
par(mfrow=c(2,2),mar=c(4,4,2,2))
with(data, plot(Global_active_power ~ data$TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab=""))
with(data, plot(Voltage ~ TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab="datetime"))
with(data, plot(Sub_metering_1 ~ TimeDate,type="l",xlab="",ylab="Energy sub metering"))
with(data, lines(Sub_metering_2 ~ TimeDate,type="l",col="Red"))
with(data, lines(Sub_metering_3 ~ TimeDate,type="l",col="Blue"))
legend("topright",lty=1,col=c("Black","Red","Blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
with(data, plot(Global_reactive_power ~ TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab="datetime"))
data <- read.csv("./data.csv")[,c(-1)]
data["TimeDate"] <- ymd_hms(paste(data[,1],paste(data[,2])))
par(mfrow=c(2,2),mar=c(4,4,2,2))
with(data, plot(Global_active_power ~ data$TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab=""))
with(data, plot(Voltage ~ TimeDate,lwd=1,type="l",ylab="Voltage",xlab="datetime"))
with(data, plot(Sub_metering_1 ~ TimeDate,type="l",xlab="",ylab="Energy sub metering"))
with(data, lines(Sub_metering_2 ~ TimeDate,type="l",col="Red"))
with(data, lines(Sub_metering_3 ~ TimeDate,type="l",col="Blue"))
legend("topright",lty=1,col=c("Black","Red","Blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),bty="n")
with(data, plot(Global_reactive_power ~ TimeDate,lwd=1,type="l",ylab="Global_reactive_Power",xlab="datetime"))
dev.copy(png,"./plot4.png",height=480,width=480)
dev.off()
setwd("~/Projects/ExData_Plotting1")
# Akash Lodha
# Data Science Specialisation Coursera
# Exploratory Data Analysis - Peer Assignment 1
#[1] "Sat Sep  6 12:05:18 2014"
## Getting the Raw Data
## Place the raw data in the raw Data Folder
# If there is no raw data folder create one
if(!file.exists("./rawData")) {
dir.create("./rawData")
}
# Download the raw dataset to the rawData Folder
if(!file.exists("./rawData/exdata_data_household_power_consumption.zip")) {
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(url,method="curl",destfile="./rawData/exdata_data_household_power_consumption.zip")
}
# Extract The zip file
if(!file.exists("./rawData/exdata_data_household_power_consumption")) {
unzip("./rawData/exdata_data_household_power_consumption.zip",exdir="./rawData")
}
# list.files("./rawData") - to list the files extracted
## Now that the data is obtained, lets process the data
## We need to take the data for only two dates
## 2007-02-01 and 2007-02-02
# We will need lubridate package for the processing of date
if( "lubridate" %in% rownames(installed.packages()) == F) {
install.packages("lubridate")
}
library(lubridate)
## In the below code we process the data and write it to data.txt
##If the data.csv is already present no need to do this
if(!file.exists("data.csv")) {
# Lets read few Lines of the dataset first to analys the dataset
readLines("./rawData/household_power_consumption.txt",n=10)
#Read the dataset
data <- read.table("./rawData/household_power_consumption.txt",header=T,sep=";")
# COnvert the Date column as date data type
data[,1] <- dmy(data[,1])
#Take the data for only the two dates
data <- data[which(data$Date==ymd("2007-02-01") | data$Date==ymd("2007-02-02")),]
# Now that we have the required data , lets write it as data.csv
write.csv(data,file="./data.csv")
data<-NULL
}
setwd("~/Projects/Explo-PeerAssignment/ExData_Plotting1")
# If there is no raw data folder create one
if(!file.exists("./rawData")) {
dir.create("./rawData")
}
# Akash Lodha
# Data Science Specialisation Coursera
# Exploratory Data Analysis - Peer Assignment 1
#[1] "Sat Sep  6 12:05:18 2014"
## Getting the Raw Data
## Place the raw data in the raw Data Folder
# If there is no raw data folder create one
if(!file.exists("./rawData")) {
dir.create("./rawData")
}
# Download the raw dataset to the rawData Folder
if(!file.exists("./rawData/exdata_data_household_power_consumption.zip")) {
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(url,method="curl",destfile="./rawData/exdata_data_household_power_consumption.zip")
}
# Extract The zip file
if(!file.exists("./rawData/exdata_data_household_power_consumption")) {
unzip("./rawData/exdata_data_household_power_consumption.zip",exdir="./rawData")
}
# list.files("./rawData") - to list the files extracted
## Now that the data is obtained, lets process the data
## We need to take the data for only two dates
## 2007-02-01 and 2007-02-02
# We will need lubridate package for the processing of date
if( "lubridate" %in% rownames(installed.packages()) == F) {
install.packages("lubridate")
}
library(lubridate)
## In the below code we process the data and write it to data.txt
##If the data.csv is already present no need to do this
if(!file.exists("data.csv")) {
# Lets read few Lines of the dataset first to analys the dataset
readLines("./rawData/household_power_consumption.txt",n=10)
#Read the dataset
data <- read.table("./rawData/household_power_consumption.txt",header=T,sep=";")
# COnvert the Date column as date data type
data[,1] <- dmy(data[,1])
#Take the data for only the two dates
data <- data[which(data$Date==ymd("2007-02-01") | data$Date==ymd("2007-02-02")),]
# Now that we have the required data , lets write it as data.csv
write.csv(data,file="./data.csv")
data<-NULL
}
# Akash Lodha
# Data Science Specialisation Coursera
# Exploratory Data Analysis - Peer Assignment 1
#[1] "Sat Sep  6 12:05:18 2014"
## plot1.R
##Getting and Processing the data
##Creating a final data set for this peer assignment has been done in
## dataProcess.R R script
source("./dataProcess.R") # This has all the code for getting the data needed
## The required data is saved in data.txt
# Read the data
data <- read.csv("./data.csv")
with(data, hist(Global_active_power,col="Red",xlab="Global Active Power (kilowatts)",ylab="Frequency",main="Global Active Power"))
dev.copy(png,"./plot1.png",height=480,width=480)
dev.off()
data<-NULL
getwd()
# Akash Lodha
# Data Science Specialisation Coursera
# Exploratory Data Analysis - Peer Assignment 1
#[1] "Sat Sep  6 12:05:18 2014"
## plot1.R
##Getting and Processing the data
##Creating a final data set for this peer assignment has been done in
## dataProcess.R R script
source("./dataProcess.R") # This has all the code for getting the data needed
## The required data is saved in data.txt
# Read the data
data <- read.csv("./data.csv")
with(data, hist(Global_active_power,col="Red",xlab="Global Active Power (kilowatts)",ylab="Frequency",main="Global Active Power"))
dev.copy(png,"./plot1.png",height=480,width=480)
dev.off()
data<-NULL
# Akash Lodha
# Data Science Specialisation Coursera
# Exploratory Data Analysis - Peer Assignment 1
#[1] "Sat Sep  6 12:05:18 2014"
## plot2.R
##Getting and Processing the data
##Creating a final data set for this peer assignment has been done in
## dataProcess.R R script
source("./dataProcess.R") # This has all the code for getting the data needed
## The required data is saved in data.txt
# Read the data
data <- read.csv("./data.csv")[,c(-1)]
data["TimeDate"] <- ymd_hms(paste(data[,1],paste(data[,2])))
with(data, plot(Global_active_power ~ data$TimeDate,lwd=1,type="l",ylab="Global Active Power (kilowatts)",xlab=""))
dev.copy(png,"./plot2.png",height=480,width=480)
dev.off()
data<-NULL
# Akash Lodha
# Data Science Specialisation Coursera
# Exploratory Data Analysis - Peer Assignment 1
#[1] "Sat Sep  6 12:05:18 2014"
## plot3.R
##Getting and Processing the data
##Creating a final data set for this peer assignment has been done in
## dataProcess.R R script
source("./dataProcess.R") # This has all the code for getting the data needed
## The required data is saved in data.txt
# Read the data
data <- read.csv("./data.csv")[,c(-1)]
# We need to merge the time and data columns
data["TimeDate"] <- ymd_hms(paste(data[,1],paste(data[,2])))
with(data, plot(Sub_metering_1 ~ data$TimeDate,type="l",xlab="",ylab="Energy sub metering"))
with(data, lines(Sub_metering_2 ~ data$TimeDate,type="l",col="Red"))
with(data, lines(Sub_metering_3 ~ data$TimeDate,type="l",col="Blue"))
legend("topright",lty=1,col=c("Black","Red","Blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
#Write the plot to png file
dev.copy(png,"./plot3.png",height=480,width=480)
dev.off()
data<-NULL
# Akash Lodha
# Data Science Specialisation Coursera
# Exploratory Data Analysis - Peer Assignment 1
#[1] "Sat Sep  6 12:05:18 2014"
## plot4.R
##Getting and Processing the data
##Creating a final data set for this peer assignment has been done in
## dataProcess.R R script
source("./dataProcess.R") # This has all the code for getting the data needed
## The required data is saved in data.txt
# Read the data
data <- read.csv("./data.csv")[,c(-1)]
# We need to merge the time and data columns
data["TimeDate"] <- ymd_hms(paste(data[,1],paste(data[,2])))
## Set global parameter to have 4 plots
par(mfrow=c(2,2),mar=c(4,4,2,2))
# First plot
with(data, plot(Global_active_power ~ data$TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab=""))
# Second Plot
with(data, plot(Voltage ~ TimeDate,lwd=1,type="l",ylab="Voltage",xlab="datetime"))
# Third plot
with(data, plot(Sub_metering_1 ~ TimeDate,type="l",xlab="",ylab="Energy sub metering"))
with(data, lines(Sub_metering_2 ~ TimeDate,type="l",col="Red"))
with(data, lines(Sub_metering_3 ~ TimeDate,type="l",col="Blue"))
legend("topright",lty=1,col=c("Black","Red","Blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),bty="n")
# Fourth plot
with(data, plot(Global_reactive_power ~ TimeDate,lwd=1,type="l",ylab="Global_reactive_Power",xlab="datetime"))
#Write the plot to png file
dev.copy(png,"./plot4.png",height=480,width=480)
dev.off()
# Akash Lodha
# Data Science Specialisation Coursera
# Exploratory Data Analysis - Peer Assignment 1
#[1] "Sat Sep  6 12:05:18 2014"
## plot4.R
##Getting and Processing the data
##Creating a final data set for this peer assignment has been done in
## dataProcess.R R script
source("./dataProcess.R") # This has all the code for getting the data needed
## The required data is saved in data.txt
# Read the data
data <- read.csv("./data.csv")[,c(-1)]
# We need to merge the time and data columns
data["TimeDate"] <- ymd_hms(paste(data[,1],paste(data[,2])))
## Set global parameter to have 4 plots
par(mfrow=c(2,2),mar=c(4,4,2,2))
# First plot
with(data, plot(Global_active_power ~ data$TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab=""))
# Second Plot
with(data, plot(Voltage ~ TimeDate,lwd=1,type="l",ylab="Voltage",xlab="datetime"))
# Third plot
with(data, plot(Sub_metering_1 ~ TimeDate,type="l",xlab="",ylab="Energy sub metering"))
with(data, lines(Sub_metering_2 ~ TimeDate,type="l",col="Red"))
with(data, lines(Sub_metering_3 ~ TimeDate,type="l",col="Blue"))
legend("topright",lty=1,col=c("Black","Red","Blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),bty="n")
# Fourth plot
with(data, plot(Global_reactive_power ~ TimeDate,lwd=1,type="l",ylab="Global_reactive_Power",xlab="datetime"))
?legend
par(mfrow=c(2,2),mar=c(4,4,2,2))
with(data, plot(Global_active_power ~ data$TimeDate,lwd=1,type="l",ylab="Global Active Power",xlab=""))
# Seco
with(data, plot(Voltage ~ TimeDate,lwd=1,type="l",ylab="Voltage",xlab="datetime"))
# Thi
with(data, plot(Sub_metering_1 ~ TimeDate,type="l",xlab="",ylab="Energy sub metering"))
with(data, lines(Sub_metering_2 ~ TimeDate,type="l",col="Red"))
with(data, lines(Sub_metering_3 ~ TimeDate,type="l",col="Blue"))
legend("topright",lty=1,col=c("Black","Red","Blue"),legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),bty="n")
with(data, plot(Global_reactive_power ~ TimeDate,lwd=1,type="l",ylab="Global_reactive_Power",xlab="datetime"))
#Write the plot to png file
dev.copy(png,"./plot4.png",height=480,width=480)
dev.off()
